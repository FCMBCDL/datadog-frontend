export declare const enum HookNames {
    Assemble = 0
}
export declare const HookNamesAsConst: {
    ASSEMBLE: HookNames.Assemble;
};
export type RecursivePartialExcept<T, K extends keyof T = never> = {
    [P in keyof T]?: T[P] extends object ? RecursivePartialExcept<T[P], never> : T[P];
} & {
    [P in K]: T[P];
};
export declare const DISCARDED = "DISCARDED";
export declare const SKIPPED = "SKIPPED";
export type DISCARDED = typeof DISCARDED;
export type SKIPPED = typeof SKIPPED;
export type AbstractHooks = ReturnType<typeof abstractHooks>;
export declare function abstractHooks<T extends {
    [K in HookNames]: (...args: any[]) => any;
}, E>(): {
    register<K extends HookNames>(hookName: K, callback: T[K]): {
        unregister: () => void;
    };
    triggerHook<K extends HookNames>(hookName: K, param: Parameters<T[K]>[0]): E | DISCARDED | undefined;
};
