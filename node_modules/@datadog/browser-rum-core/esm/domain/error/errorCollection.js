import { ErrorSource, generateUUID, computeRawError, Observable, trackRuntimeError, combine, } from '@datadog/browser-core';
import { trackConsoleError } from './trackConsoleError';
import { trackReportError } from './trackReportError';
export function startErrorCollection(lifeCycle, configuration) {
    const errorObservable = new Observable();
    trackConsoleError(errorObservable);
    trackRuntimeError(errorObservable);
    trackReportError(configuration, errorObservable);
    errorObservable.subscribe((error) => lifeCycle.notify(14 /* LifeCycleEventType.RAW_ERROR_COLLECTED */, { error }));
    return doStartErrorCollection(lifeCycle);
}
export function doStartErrorCollection(lifeCycle) {
    lifeCycle.subscribe(14 /* LifeCycleEventType.RAW_ERROR_COLLECTED */, ({ error, customerContext }) => {
        customerContext = combine(error.context, customerContext);
        lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, {
            customerContext,
            ...processError(error),
        });
    });
    return {
        addError: ({ error, handlingStack, componentStack, startClocks, context: customerContext }) => {
            const rawError = computeRawError({
                originalError: error,
                handlingStack,
                componentStack,
                startClocks,
                nonErrorPrefix: "Provided" /* NonErrorPrefix.PROVIDED */,
                source: ErrorSource.CUSTOM,
                handling: "handled" /* ErrorHandling.HANDLED */,
            });
            lifeCycle.notify(14 /* LifeCycleEventType.RAW_ERROR_COLLECTED */, {
                customerContext,
                error: rawError,
            });
        },
    };
}
function processError(error) {
    const rawRumEvent = {
        date: error.startClocks.timeStamp,
        error: {
            id: generateUUID(),
            message: error.message,
            source: error.source,
            stack: error.stack,
            handling_stack: error.handlingStack,
            component_stack: error.componentStack,
            type: error.type,
            handling: error.handling,
            causes: error.causes,
            source_type: 'browser',
            fingerprint: error.fingerprint,
            csp: error.csp,
        },
        type: "error" /* RumEventType.ERROR */,
    };
    const domainContext = {
        error: error.originalError,
        handlingStack: error.handlingStack,
    };
    return {
        rawRumEvent,
        startTime: error.startClocks.relative,
        domainContext,
    };
}
//# sourceMappingURL=errorCollection.js.map