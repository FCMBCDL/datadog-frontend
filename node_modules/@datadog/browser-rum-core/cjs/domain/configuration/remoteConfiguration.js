"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAndApplyRemoteConfiguration = fetchAndApplyRemoteConfiguration;
exports.applyRemoteConfiguration = applyRemoteConfiguration;
exports.fetchRemoteConfiguration = fetchRemoteConfiguration;
exports.buildEndpoint = buildEndpoint;
const browser_core_1 = require("@datadog/browser-core");
const REMOTE_CONFIGURATION_VERSION = 'v1';
function fetchAndApplyRemoteConfiguration(initConfiguration, callback) {
    fetchRemoteConfiguration(initConfiguration, (remoteInitConfiguration) => {
        callback(applyRemoteConfiguration(initConfiguration, remoteInitConfiguration));
    });
}
function applyRemoteConfiguration(initConfiguration, remoteInitConfiguration) {
    return { ...initConfiguration, ...remoteInitConfiguration };
}
function fetchRemoteConfiguration(configuration, callback) {
    const xhr = new XMLHttpRequest();
    (0, browser_core_1.addEventListener)(configuration, xhr, 'load', function () {
        if (xhr.status === 200) {
            const remoteConfiguration = JSON.parse(xhr.responseText);
            callback(remoteConfiguration.rum);
        }
        else {
            displayRemoteConfigurationFetchingError();
        }
    });
    (0, browser_core_1.addEventListener)(configuration, xhr, 'error', function () {
        displayRemoteConfigurationFetchingError();
    });
    xhr.open('GET', buildEndpoint(configuration));
    xhr.send();
}
function buildEndpoint(configuration) {
    return `https://sdk-configuration.${(0, browser_core_1.buildEndpointHost)('rum', configuration)}/${REMOTE_CONFIGURATION_VERSION}/${encodeURIComponent(configuration.remoteConfigurationId)}.json`;
}
function displayRemoteConfigurationFetchingError() {
    browser_core_1.display.error('Error fetching the remote configuration.');
}
//# sourceMappingURL=remoteConfiguration.js.map