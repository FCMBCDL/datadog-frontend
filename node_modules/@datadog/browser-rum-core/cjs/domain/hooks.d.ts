import type { DISCARDED, Duration, HookNamesAsConst, RecursivePartialExcept, RelativeTime, SKIPPED } from '@datadog/browser-core';
import type { RumEvent } from '../rumEvent.types';
export type DefaultRumEventAttributes = RecursivePartialExcept<RumEvent, 'type'>;
export type HookCallbackMap = {
    [HookNamesAsConst.ASSEMBLE]: (param: {
        eventType: RumEvent['type'];
        startTime: RelativeTime;
        duration?: Duration | undefined;
    }) => DefaultRumEventAttributes | SKIPPED | DISCARDED;
};
export type Hooks = ReturnType<typeof createHooks>;
export declare const createHooks: () => {
    register<K extends import("@datadog/browser-core").HookNames>(hookName: K, callback: HookCallbackMap[K]): {
        unregister: () => void;
    };
    triggerHook<K extends import("@datadog/browser-core").HookNames>(hookName: K, param: Parameters<HookCallbackMap[K]>[0]): DefaultRumEventAttributes | "DISCARDED" | undefined;
};
