"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startLongTaskCollection = startLongTaskCollection;
const browser_core_1 = require("@datadog/browser-core");
const performanceObservable_1 = require("../../browser/performanceObservable");
function startLongTaskCollection(lifeCycle, configuration) {
    const performanceLongTaskSubscription = (0, performanceObservable_1.createPerformanceObservable)(configuration, {
        type: performanceObservable_1.RumPerformanceEntryType.LONG_TASK,
        buffered: true,
    }).subscribe((entries) => {
        for (const entry of entries) {
            if (entry.entryType !== performanceObservable_1.RumPerformanceEntryType.LONG_TASK) {
                break;
            }
            if (!configuration.trackLongTasks) {
                break;
            }
            const startClocks = (0, browser_core_1.relativeToClocks)(entry.startTime);
            const rawRumEvent = {
                date: startClocks.timeStamp,
                long_task: {
                    id: (0, browser_core_1.generateUUID)(),
                    entry_type: "long-task" /* RumLongTaskEntryType.LONG_TASK */,
                    duration: (0, browser_core_1.toServerDuration)(entry.duration),
                },
                type: "long_task" /* RumEventType.LONG_TASK */,
                _dd: {
                    discarded: false,
                },
            };
            lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, {
                rawRumEvent,
                startTime: startClocks.relative,
                duration: entry.duration,
                domainContext: { performanceEntry: entry },
            });
        }
    });
    return {
        stop() {
            performanceLongTaskSubscription.unsubscribe();
        },
    };
}
//# sourceMappingURL=longTaskCollection.js.map