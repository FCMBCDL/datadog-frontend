"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSessionContext = startSessionContext;
const browser_core_1 = require("@datadog/browser-core");
function startSessionContext(hooks, sessionManager, recorderApi, viewHistory) {
    hooks.register(0 /* HookNames.Assemble */, ({ eventType, startTime }) => {
        const session = sessionManager.findTrackedSession(startTime);
        const view = viewHistory.findView(startTime);
        if (!session || !view) {
            return browser_core_1.DISCARDED;
        }
        let hasReplay;
        let sampledForReplay;
        let isActive;
        if (eventType === "view" /* RumEventType.VIEW */) {
            hasReplay = recorderApi.getReplayStats(view.id) ? true : undefined;
            sampledForReplay = session.sessionReplay === 1 /* SessionReplayState.SAMPLED */;
            isActive = view.sessionIsActive ? undefined : false;
        }
        else {
            hasReplay = recorderApi.isRecording() ? true : undefined;
        }
        return {
            type: eventType,
            session: {
                id: session.id,
                type: "user" /* SessionType.USER */,
                has_replay: hasReplay,
                sampled_for_replay: sampledForReplay,
                is_active: isActive,
            },
        };
    });
}
//# sourceMappingURL=sessionContext.js.map